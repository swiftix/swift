// RUN: %target-sil-opt -enable-sil-verify-all %s -specdevirt  | FileCheck %s

sil_stage canonical

import Builtin
import Swift
import SwiftShims

public protocol P : class {
  func foo() -> Int32
  func boo() -> Int32
}

final public class C : P {
  public final func foo() -> Int32
  public final func boo() -> Int32
  deinit
  init()
}

final public class D : P {
  public final func foo() -> Int32
  public final func boo() -> Int32
  deinit
  init()
}

final public class E : P {
  public final func foo() -> Int32
  public final func boo() -> Int32
  deinit
  init()
}

@inline(never) public func doSomething(_ p: P) -> Int32

sil @_TFC25devirt_speculate_protocol1C3foofT_Vs5Int32 : $@convention(method) (@guaranteed C) -> Int32 {
bb0(%0 : $C):
  debug_value %0 : $C, let, name "self", argno 1
  %2 = integer_literal $Builtin.Int32, 1
  %3 = struct $Int32 (%2 : $Builtin.Int32)
  return %3 : $Int32
}

sil @_TFC25devirt_speculate_protocol1C3boofT_Vs5Int32 : $@convention(method) (@guaranteed C) -> Int32 {
bb0(%0 : $C):
  debug_value %0 : $C, let, name "self", argno 1
  %2 = integer_literal $Builtin.Int32, 11
  %3 = struct $Int32 (%2 : $Builtin.Int32)
  return %3 : $Int32
}

sil [transparent] [thunk] @_TTWC25devirt_speculate_protocol1CS_1PS_FS1_3foofT_Vs5Int32 : $@convention(witness_method) (@guaranteed C) -> Int32 {
bb0(%0 : $C):
  strong_retain %0 : $C
  %2 = function_ref @_TFC25devirt_speculate_protocol1C3foofT_Vs5Int32 : $@convention(method) (@guaranteed C) -> Int32
  %3 = apply %2(%0) : $@convention(method) (@guaranteed C) -> Int32
  strong_release %0 : $C
  return %3 : $Int32
}




sil [transparent] [thunk] @_TTWC25devirt_speculate_protocol1CS_1PS_FS1_3boofT_Vs5Int32 : $@convention(witness_method) (@guaranteed C) -> Int32 {
bb0(%0 : $C):
  strong_retain %0 : $C
  %2 = function_ref @_TFC25devirt_speculate_protocol1C3boofT_Vs5Int32 : $@convention(method) (@guaranteed C) -> Int32
  %3 = apply %2(%0) : $@convention(method) (@guaranteed C) -> Int32
  strong_release %0 : $C
  return %3 : $Int32
}


sil @_TFC25devirt_speculate_protocol1D3foofT_Vs5Int32 : $@convention(method) (@guaranteed D) -> Int32 {
bb0(%0 : $D):
  %2 = integer_literal $Builtin.Int32, 2
  %3 = struct $Int32 (%2 : $Builtin.Int32)
  return %3 : $Int32
}



sil @_TFC25devirt_speculate_protocol1D3boofT_Vs5Int32 : $@convention(method) (@guaranteed D) -> Int32 {
bb0(%0 : $D):
  %2 = integer_literal $Builtin.Int32, 12
  %3 = struct $Int32 (%2 : $Builtin.Int32)
  return %3 : $Int32
}


sil [transparent] [thunk] @_TTWC25devirt_speculate_protocol1DS_1PS_FS1_3foofT_Vs5Int32 : $@convention(witness_method) (@guaranteed D) -> Int32 {
bb0(%0 : $D):
  strong_retain %0 : $D
  %2 = function_ref @_TFC25devirt_speculate_protocol1D3foofT_Vs5Int32 : $@convention(method) (@guaranteed D) -> Int32
  %3 = apply %2(%0) : $@convention(method) (@guaranteed D) -> Int32
  strong_release %0 : $D
  return %3 : $Int32
}

sil [transparent] [thunk] @_TTWC25devirt_speculate_protocol1DS_1PS_FS1_3boofT_Vs5Int32 : $@convention(witness_method) (@guaranteed D) -> Int32 {
bb0(%0 : $D):
  strong_retain %0 : $D
  %2 = function_ref @_TFC25devirt_speculate_protocol1D3boofT_Vs5Int32 : $@convention(method) (@guaranteed D) -> Int32
  %3 = apply %2(%0) : $@convention(method) (@guaranteed D) -> Int32
  strong_release %0 : $D
  return %3 : $Int32
}

sil @_TFC25devirt_speculate_protocol1E3foofT_Vs5Int32 : $@convention(method) (@guaranteed E) -> Int32 {
bb0(%0 : $E):
  debug_value %0 : $E, let, name "self", argno 1
  %2 = integer_literal $Builtin.Int32, 3
  %3 = struct $Int32 (%2 : $Builtin.Int32)
  return %3 : $Int32
}

sil @_TFC25devirt_speculate_protocol1E3boofT_Vs5Int32 : $@convention(method) (@guaranteed E) -> Int32 {
bb0(%0 : $E):
  %2 = integer_literal $Builtin.Int32, 13
  %3 = struct $Int32 (%2 : $Builtin.Int32)
  return %3 : $Int32
}

sil [transparent] [thunk] @_TTWC25devirt_speculate_protocol1ES_1PS_FS1_3foofT_Vs5Int32 : $@convention(witness_method) (@guaranteed E) -> Int32 {
bb0(%0 : $E):
  strong_retain %0 : $E
  %2 = function_ref @_TFC25devirt_speculate_protocol1E3foofT_Vs5Int32 : $@convention(method) (@guaranteed E) -> Int32
  %3 = apply %2(%0) : $@convention(method) (@guaranteed E) -> Int32
  strong_release %0 : $E
  return %3 : $Int32
}

sil [transparent] [thunk] @_TTWC25devirt_speculate_protocol1ES_1PS_FS1_3boofT_Vs5Int32 : $@convention(witness_method) (@guaranteed E) -> Int32 {
bb0(%0 : $E):
  strong_retain %0 : $E
  %2 = function_ref @_TFC25devirt_speculate_protocol1E3boofT_Vs5Int32 : $@convention(method) (@guaranteed E) -> Int32
  %3 = apply %2(%0) : $@convention(method) (@guaranteed E) -> Int32
  strong_release %0 : $E
  return %3 : $Int32
}

// Check that witness_method instructions can be devirtualized by means of a speculative devirtualization,
// if it is invoked on a class existential.

// CHECK-LABEL: sil [noinline] @test_class_protocol_devirtualization
// CHECK: bb0
// CHECK: %[[OPENED_EXISTENTIAL1:[0-9]+]] = open_existential_ref %0 : $P to $@opened("C4960DBA-02C5-11E6-BE1B-B8E856428C60") P
// CHECK: checked_cast_br [exact] %[[OPENED_EXISTENTIAL1]] : $@opened("C4960DBA-02C5-11E6-BE1B-B8E856428C60") P to $C
// CHECK: bb1
// CHECK: %[[OPENED_EXISTENTIAL2:[0-9]+]] = open_existential_ref %0 : $P to $@opened("C4961756-02C5-11E6-BE1B-B8E856428C60") P
// CHECK: checked_cast_br [exact] %[[OPENED_EXISTENTIAL2]] : $@opened("C4961756-02C5-11E6-BE1B-B8E856428C60") P to $C
// CHECK: bb3
// CHECK: function_ref @_TTWC25devirt_speculate_protocol1CS_1PS_FS1_3foofT_Vs5Int32
// CHECK: apply
// CHECK: br bb1
// CHECK: bb4
// CHECK: checked_cast_br [exact] %[[OPENED_EXISTENTIAL1]] : $@opened("C4960DBA-02C5-11E6-BE1B-B8E856428C60") P to $D
// CHECK: bb6
// CHECK: function_ref @_TTWC25devirt_speculate_protocol1DS_1PS_FS1_3foofT_Vs5Int32
// CHECK: apply
// CHECK: br bb5
// CHECK: bb7
// CHECK: checked_cast_br [exact] %[[OPENED_EXISTENTIAL1]] : $@opened("C4960DBA-02C5-11E6-BE1B-B8E856428C60") P to $E
// CHECK: bb9
// CHECK: function_ref @_TTWC25devirt_speculate_protocol1ES_1PS_FS1_3foofT_Vs5Int32
// CHECK: apply
// CHECK: br bb8
// CHECK: bb10
// CHECK: apply %{{[0-9]+}}<@opened("C4960DBA-02C5-11E6-BE1B-B8E856428C60") P>(%[[OPENED_EXISTENTIAL1]]) : $@convention(witness_method)
// CHECK: br bb8
// CHECK: bb1
// CHECK: function_ref @_TTWC25devirt_speculate_protocol1CS_1PS_FS1_3foofT_Vs5Int32
// CHECK: apply
// CHECK: br bb2
// CHECK: bb12
// CHECK: checked_cast_br [exact] %[[OPENED_EXISTENTIAL2]] : $@opened("C4961756-02C5-11E6-BE1B-B8E856428C60") P to $D
// CHECK: bb14
// CHECK: function_ref @_TTWC25devirt_speculate_protocol1DS_1PS_FS1_3foofT_Vs5Int32
// CHECK: apply
// CHECK: br bb13
// CHECK: bb15
// CHECK: checked_cast_br [exact] %[[OPENED_EXISTENTIAL2]] : $@opened("C4961756-02C5-11E6-BE1B-B8E856428C60") P to $E
// CHECK: bb17
// CHECK: function_ref @_TTWC25devirt_speculate_protocol1ES_1PS_FS1_3foofT_Vs5Int32
// CHECK: apply
// CHECK: br bb16
// CHECK: bb18
// CHECK: apply %{{[0-9]+}}<@opened("C4961756-02C5-11E6-BE1B-B8E856428C60") P>(%[[OPENED_EXISTENTIAL2]]) : $@convention(witness_method)
// CHECK: br bb16

sil [noinline] @test_class_protocol_devirtualization : $@convention(thin) (@owned P) -> Int32 {
bb0(%0 : $P):
  debug_value %0 : $P, let, name "p", argno 1
  %2 = open_existential_ref %0 : $P to $@opened("C4960DBA-02C5-11E6-BE1B-B8E856428C60") P
  %3 = witness_method $@opened("C4960DBA-02C5-11E6-BE1B-B8E856428C60") P, #P.foo!1, %2 : $@opened("C4960DBA-02C5-11E6-BE1B-B8E856428C60") P : $@convention(witness_method) <τ_0_0 where τ_0_0 : P> (@guaranteed τ_0_0) -> Int32
  // Invoke P.foo
  %4 = apply %3<@opened("C4960DBA-02C5-11E6-BE1B-B8E856428C60") P>(%2) : $@convention(witness_method) <τ_0_0 where τ_0_0 : P> (@guaranteed τ_0_0) -> Int32
  %5 = open_existential_ref %0 : $P to $@opened("C4961756-02C5-11E6-BE1B-B8E856428C60") P
  // invoke P.foo
  %6 = witness_method $@opened("C4961756-02C5-11E6-BE1B-B8E856428C60") P, #P.foo!1, %5 : $@opened("C4961756-02C5-11E6-BE1B-B8E856428C60") P : $@convention(witness_method) <τ_0_0 where τ_0_0 : P> (@guaranteed τ_0_0) -> Int32
  %7 = apply %6<@opened("C4961756-02C5-11E6-BE1B-B8E856428C60") P>(%5) : $@convention(witness_method) <τ_0_0 where τ_0_0 : P> (@guaranteed τ_0_0) -> Int32
  %8 = struct_extract %4 : $Int32, #Int32._value
  %9 = struct_extract %7 : $Int32, #Int32._value
  %10 = integer_literal $Builtin.Int1, -1
  %11 = builtin "sadd_with_overflow_Int32"(%8 : $Builtin.Int32, %9 : $Builtin.Int32, %10 : $Builtin.Int1) : $(Builtin.Int32, Builtin.Int1)
  %12 = tuple_extract %11 : $(Builtin.Int32, Builtin.Int1), 0
  %13 = tuple_extract %11 : $(Builtin.Int32, Builtin.Int1), 1
  cond_fail %13 : $Builtin.Int1
  %15 = struct $Int32 (%12 : $Builtin.Int32)
  strong_release %0 : $P
  return %15 : $Int32
}


sil_vtable C {
}

sil_vtable D {
}

sil_vtable E {
}


sil_witness_table [fragile] C: P module devirt_speculate_protocol {
  method #P.foo!1: @_TTWC25devirt_speculate_protocol1CS_1PS_FS1_3foofT_Vs5Int32
  method #P.boo!1: @_TTWC25devirt_speculate_protocol1CS_1PS_FS1_3boofT_Vs5Int32
}

sil_witness_table [fragile] D: P module devirt_speculate_protocol {
  method #P.foo!1: @_TTWC25devirt_speculate_protocol1DS_1PS_FS1_3foofT_Vs5Int32
  method #P.boo!1: @_TTWC25devirt_speculate_protocol1DS_1PS_FS1_3boofT_Vs5Int32
}

sil_witness_table [fragile] E: P module devirt_speculate_protocol {
  method #P.foo!1: @_TTWC25devirt_speculate_protocol1ES_1PS_FS1_3foofT_Vs5Int32
  method #P.boo!1: @_TTWC25devirt_speculate_protocol1ES_1PS_FS1_3boofT_Vs5Int32
}

sil_default_witness_table P {
  no_default
  no_default
}

