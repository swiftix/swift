//===--- RuntimeFunctions.def - Runtime Functions Database ------*- C++ -*-===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2016 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
//
// This file defines x-macros used for metaprogramming with the set of
// runtime functions.
//
//===----------------------------------------------------------------------===//

/// FUNCTION(Id, Namespace, Name, ReturnTys, ArgTys, ArgNames,  CC, Attrs)
///   Makes available as "Id" the following runtime function:
///     ReturnTy Name(ArgTys...);
///   ReturnTys is a call to RETURNS, which takes a non-empty list
///     of expressions meant to be looked up in IRGenModule.
///   ArgTys is either NO_ARGS or a call to ARGS, which takes a non-empty
///     list of declarations to be used to declare a method. These
///     declarations should contain a parameter name in form ARGNAME(ptr)
///   Attrs is a parenthesized list of attributes.
///   Namespace is an optional namespace, e.g. NAMESPACE(swift)
///
///   By default, passes Id to FUNCTION_ID.  Therefore, the valid uses of
///   this database define either:
///     FUNCTION_ID
///   or all of the following:
///     FUNCTION
///     RETURNS
///     ARGS
///     NO_ARGS
///     ATTRS
///     NO_ATTRS
#ifndef FUNCTION
#define FUNCTION(Id, Name, CC, ReturnTys, ArgTys, Attrs) FUNCTION_ID(Id)
#endif

#define SizeTy size_t
#define Int8PtrTy void *
#define RefCountedPtrTy HeapObject *
#define VoidTy void
#define VoidPtrTy void *
#define UInt32Ty uint32_t
#define TypeMetadataPtrTy const Metadata *
#define ExistentialTypeMetadataPtrTy const ExistentialTypeMetadata *
#define TypeMetadataPtrConstTy Metadata const *
#define HeapMetadataPtrConstTy HeapMetadata const *
#define OpaquePtrTy OpaqueValue *
#define UnknownRefCountedPtrTy void *
#define TypeMetadataPatternPtrTy GenericMetadata *
#define BridgeObjectPtrTy void *
#define GenericWitnessTablePtrTy GenericWitnessTable *
#define WitnessTablePtrTy WitnessTable *
#define GenericWitnessTablePtrTy GenericWitnessTable *
#define ClassMetadataPtrTy const ClassMetadata *
#define DynamicCastFlagsTy DynamicCastFlags
#define Int8PtrPtrTy void * const *
#define protocol_descriptor_t ProtocolDescriptor
//#define GenericMetadata void
#define ProtocolDescriptorPtrPtrTy const protocol_descriptor_t * *
#define Int1Ty bool
#define IntTy int
#define UnsignedTy unsigned

// RefCounted *swift_allocObject(Metadata *type, size_t size, size_t alignMask);
FUNCTION(AllocObject,  , swift_allocObject,   RUNTIME_CC1,
         RETURNS(RefCountedPtrTy),
         ARGS(HeapMetadataPtrConstTy ARGNAME(metadata), SizeTy ARGNAME(requiredSize), SizeTy ARGNAME(requiredAlignmentMask)),
         ARGNAMES(metadata, requiredSize, requiredAlignmentMask),
         ATTRS(NoUnwind))


// void swift_deallocObject(HeapObject *obj, size_t size, size_t alignMask);
FUNCTION(DeallocObject,  , swift_deallocObject, RUNTIME_CC1,
         RETURNS(VoidTy),
         ARGS(RefCountedPtrTy ARGNAME(object), SizeTy ARGNAME(allocatedSize), SizeTy ARGNAME(allocatedAlignMask)),
         ARGNAMES(object, allocatedSize, allocatedAlignMask),
         ATTRS(NoUnwind))

// void *swift_slowAlloc(size_t size, size_t alignMask);
FUNCTION(SlowAlloc, ,  swift_slowAlloc,     RUNTIME_CC1,
         RETURNS(Int8PtrTy),
         ARGS(SizeTy ARGNAME(size), SizeTy ARGNAME(alignMask)),
         ARGNAMES(size, alignMask),
         ATTRS(NoUnwind))

// void swift_slowDealloc(void *ptr, size_t size, size_t alignMask);
FUNCTION(SlowDealloc, , swift_slowDealloc, RUNTIME_CC1,
         RETURNS(VoidTy),
         ARGS(Int8PtrTy ARGNAME(ptr), SizeTy ARGNAME(size), SizeTy ARGNAME(alignMask)),
         ARGNAMES(ptr, size, alignMask),
         ATTRS(NoUnwind))

// void swift_retain(void *ptr);
FUNCTION(NativeStrongRetain, NAMESPACE(swift), swift_retain, RUNTIME_CC1,
         RETURNS(VoidTy),
         ARGS(RefCountedPtrTy ARGNAME(ptr)),
         ARGNAMES(ptr),
         ATTRS(NoUnwind))

// void swift_release(void *ptr);
FUNCTION(NativeStrongRelease, NAMESPACE(swift), swift_release, RUNTIME_CC1,
         RETURNS(VoidTy),
         ARGS(RefCountedPtrTy ARGNAME(ptr)),
         ARGNAMES(ptr),
         ATTRS(NoUnwind))

// void swift_retain_n(void *ptr, uint32_t n);
FUNCTION(NativeStrongRetainN, NAMESPACE(swift), swift_retain_n, RUNTIME_CC1,
         RETURNS(VoidTy),
         ARGS(RefCountedPtrTy ARGNAME(ptr), UInt32Ty ARGNAME(n)),
         ARGNAMES(ptr, n),
         ATTRS(NoUnwind))

// void swift_release_n(void *ptr, uint32_t n);
FUNCTION(NativeStrongReleaseN, NAMESPACE(swift), swift_release_n, RUNTIME_CC1,
         RETURNS(VoidTy),
         ARGS(RefCountedPtrTy ARGNAME(ptr), UInt32Ty ARGNAME(n)),
         ARGNAMES(ptr, n),
         ATTRS(NoUnwind))

// void *swift_tryPin(void *ptr);
FUNCTION(NativeTryPin, NAMESPACE(swift), swift_tryPin, RUNTIME_CC1,
         RETURNS(RefCountedPtrTy),
         ARGS(RefCountedPtrTy ARGNAME(ptr)),
         ARGNAMES(ptr),
         ATTRS(NoUnwind))

// void swift_unpin(void *ptr);
FUNCTION(NativeUnpin, NAMESPACE(swift), swift_unpin, RUNTIME_CC1,
         RETURNS(VoidTy),
         ARGS(RefCountedPtrTy ARGNAME(ptr)),
         ARGNAMES(ptr),
         ATTRS(NoUnwind))

// HeapObject *_swift_tryRetain_(HeapObject *object)
FUNCTION(NativeTryRetain, NAMESPACE(swift), swift_tryRetain, RUNTIME_CC1,
         RETURNS(RefCountedPtrTy),
         ARGS(RefCountedPtrTy ARGNAME(object)),
         ARGNAMES(object),
         ATTRS(NoUnwind))

#if 0

// void swift_unknownRetain_n(void *ptr, int n);
FUNCTION(NativeUnknownRetainN, NAMESPACE(swift), swift_unknownRetain_n, RUNTIME_CC1,
         RETURNS(VoidTy),
         ARGS(UnknownRefCountedPtrTy ARGNAME(ptr), int ARGNAME(n)),
         ARGNAMES(ptr, n),
         ATTRS(NoUnwind))

// void swift_unknownRelease_n(void *ptr, int n);
FUNCTION(NativeUnknownReleaseN, NAMESPACE(swift), swift_unknownRelease_n, RUNTIME_CC1,
         RETURNS(VoidTy),
         ARGS(UnknownRefCountedPtrTy ARGNAME(ptr), int ARGNAME(n)),
         ARGNAMES(ptr, n),
         ATTRS(NoUnwind))

// void swift_unknownRetain(void *ptr);
FUNCTION(UnknownRetain, NAMESPACE(swift), swift_unknownRetain, RUNTIME_CC1,
         RETURNS(VoidTy),
         ARGS(UnknownRefCountedPtrTy ARGNAME(ptr)),
         ARGNAMES(ptr),
         ATTRS(NoUnwind))

// void swift_unknownRelease(void *ptr);
FUNCTION(UnknownRelease, NAMESPACE(swift), swift_unknownRelease, RUNTIME_CC1,
         RETURNS(VoidTy),
         ARGS(UnknownRefCountedPtrTy ARGNAME(ptr)),
         ARGNAMES(ptr),
         ATTRS(NoUnwind))

// void *swift_bridgeObjectRetain(void *ptr);
FUNCTION(BridgeObjectStrongRetain, NAMESPACE(swift), swift_bridgeObjectRetain, RUNTIME_CC1,
         RETURNS(BridgeObjectPtrTy),
         ARGS(BridgeObjectPtrTy ARGNAME(ptr)),
         ARGNAMES(ptr),
         ATTRS(NoUnwind))

// void swift_bridgeRelease(void *ptr);
FUNCTION(BridgeObjectStrongRelease, NAMESPACE(swift), swift_bridgeObjectRelease, RUNTIME_CC1,
         RETURNS(VoidTy),
         ARGS(BridgeObjectPtrTy ARGNAME(ptr)),
         ARGNAMES(ptr),
         ATTRS(NoUnwind))

// void *swift_bridgeObjectRetain_n(void *ptr, int n);
FUNCTION(BridgeObjectRetainN, NAMESPACE(swift), swift_bridgeObjectRetain_n, RUNTIME_CC1,
         RETURNS(BridgeObjectPtrTy),
         ARGS(UnknownRefCountedPtrTy ARGNAME(ptr), int ARGNAME(n)),
         ARGNAMES(ptr, n),
         ATTRS(NoUnwind))

// void swift_bridgeObjectRelease_n(void *ptr, int n);
FUNCTION(BridgeObjectReleaseN, NAMESPACE(swift), swift_bridgeObjectRelease_n, RUNTIME_CC1,
         RETURNS(VoidTy),
         ARGS(UnknownRefCountedPtrTy ARGNAME(ptr), int ARGNAME(n)),
         ARGNAMES(ptr, n),
         ATTRS(NoUnwind))

#endif

// void swift_unownedRetain(void *ptr);
FUNCTION(NativeUnownedRetain,  NAMESPACE(swift), swift_unownedRetain, RUNTIME_CC1,
         RETURNS(VoidTy),
         ARGS(RefCountedPtrTy ARGNAME(ptr)),
         ARGNAMES(ptr),
         ATTRS(NoUnwind))

// void swift_unownedRelease(void *ptr);
FUNCTION(NativeUnownedRelease, NAMESPACE(swift), swift_unownedRelease, RUNTIME_CC1,
         RETURNS(VoidTy),
         ARGS(RefCountedPtrTy ARGNAME(ptr)),
         ARGNAMES(ptr),
         ATTRS(NoUnwind))

// void swift_unownedRetain_n(void *ptr, int n);
FUNCTION(NativeUnownedRetainN, NAMESPACE(swift), swift_unownedRetain_n, RUNTIME_CC1,
         RETURNS(VoidTy),
         ARGS(RefCountedPtrTy ARGNAME(ptr), int ARGNAME(n)),
         ARGNAMES(ptr, n),
         ATTRS(NoUnwind))

// void swift_unownedRelease_n(void *ptr, int n);
FUNCTION(NativeUnownedReleaseN, NAMESPACE(swift), swift_unownedRelease_n, RUNTIME_CC1,
         RETURNS(VoidTy),
         ARGS(RefCountedPtrTy ARGNAME(ptr), int ARGNAME(n)),
         ARGNAMES(ptr, n),
         ATTRS(NoUnwind))

// void swift_unownedRetainStrong(void *ptr);
FUNCTION(NativeStrongRetainUnowned, NAMESPACE(swift), swift_unownedRetainStrong, RUNTIME_CC1,
         RETURNS(VoidTy),
         ARGS(RefCountedPtrTy ARGNAME(ptr)),
         ARGNAMES(ptr),
         ATTRS(NoUnwind))

// void swift_unownedRetainStrongAndRelease(void *ptr);
FUNCTION(NativeStrongRetainAndUnownedRelease, NAMESPACE(swift),
         swift_unownedRetainStrongAndRelease, RUNTIME_CC1,
         RETURNS(VoidTy),
         ARGS(RefCountedPtrTy ARGNAME(ptr)),
         ARGNAMES(ptr),
         ATTRS(NoUnwind))

// Metadata *swift_getGenericMetadata(GenericMetadata *pattern,
//                                    const void *arguments);
FUNCTION(GetGenericMetadata, , swift_getGenericMetadata, RUNTIME_CC1,
         RETURNS(TypeMetadataPtrTy),
         ARGS(TypeMetadataPatternPtrTy ARGNAME(pattern), const Int8PtrTy ARGNAMES(arguments)),
         ARGNAMES(pattern, arguments),
         ATTRS(NoUnwind, ReadOnly))

// const WitnessTable *
// swift_getGenericWitnessTable(GenericWitnessTable *genericTable,
//                              const Metadata *type,
//                              void * const *otherData);
FUNCTION(GetGenericWitnessTable, , swift_getGenericWitnessTable, RUNTIME_CC1,
         RETURNS(const WitnessTablePtrTy),
         ARGS(GenericWitnessTablePtrTy ARGNAME(genericTable),
              TypeMetadataPtrTy ARGNAME(type),
              Int8PtrPtrTy ARGNAME(otherData)),
         ARGNAMES(genericTable, type, otherData),
         ATTRS(NoUnwind, ReadOnly))

// ExistentialTypeMetadata *swift_getExistentialTypeMetadata(size_t numProtocols,
//                              const protocol_descriptor_t * const *protocols);
FUNCTION(GetExistentialiTypeMetadata, ,
         swift_getExistentialTypeMetadata, RUNTIME_CC1,
         RETURNS(ExistentialTypeMetadataPtrTy),
         ARGS(SizeTy ARGNAME(numProtocols),
              ProtocolDescriptorPtrPtrTy ARGNAME(protocols)),
         ARGNAMES(numProtocols, protocols),
         ATTRS(NoUnwind, ReadOnly))

// void *swift_dynamicCastClass(const void *object, const ClassMetadata *targetType);
FUNCTION(DynamicCastClass, , swift_dynamicCastClass, RUNTIME_CC1,
         RETURNS(const Int8PtrTy),
         ARGS(const Int8PtrTy ARGNAME(object), ClassMetadataPtrTy  ARGNAME(targetType)),
         ARGNAMES(object, targetType),
         ATTRS(NoUnwind, ReadOnly))

// bool swift_dynamicCast(opaque* dest, opaque* src, type* srcType, type* targetType, size_t flags);
FUNCTION(DynamicCast, , swift_dynamicCast, RUNTIME_CC1,
         RETURNS(Int1Ty),
         ARGS(OpaquePtrTy ARGNAME(dest), OpaquePtrTy ARGNAME(src), TypeMetadataPtrTy ARGNAME(srcType), TypeMetadataPtrTy ARGNAME(targetType),
              DynamicCastFlagsTy ARGNAME(flags)),
         ARGNAMES(dest, src, srcType, targetType, flags),
         ATTRS(NoUnwind, ReadOnly))

#if SWIFT_OBJC_INTEROP

#define ObjCPtrTy id
#define ObjCClassPtrTy Class

// Class swift_getInitializedObjCClass(Class c)
FUNCTION(GetInitializedObjCClass, , swift_getInitializedObjCClass, RUNTIME_CC1,
         RETURNS(ObjCClassPtrTy),
         ARGS(ObjCClassPtrTy ARGNAME(c)),
         ARGNAMES(c),
         ATTRS(NoUnwind))
#if 0

//FUNCTION(ObjCRetain, , swift_objc_retain, RUNTIME_CC1,
//         RETURNS(ObjCPtrTy), ARGS(ObjCPtrTy ARGNAME(ptr)), ARGNAMES(ptr), ATTRS(NoUnwind))

//FUNCTION(ObjCRelease, , swift_objc_release, RUNTIME_CC1,
//         RETURNS(VoidTy), ARGS(ObjCPtrTy ARGNAME(ptr)), ARGNAMES(ptr), ATTRS(NoUnwind))

FUNCTION_WITH_IMPL(ObjCRetain, , swift_objc_retain, objc_retain, RUNTIME_CC1,
         RETURNS(ObjCPtrTy), ARGS(ObjCPtrTy ARGNAME(ptr)), ARGNAMES(ptr), ATTRS(NoUnwind))

FUNCTION_WITH_IMPL(ObjCRelease, , swift_objc_release, objc_release, RUNTIME_CC1,
         RETURNS(VoidTy), ARGS(ObjCPtrTy ARGNAME(ptr)), ARGNAMES(ptr), ATTRS(NoUnwind))

#endif
#endif /* SWIFT_OBJC_INTEROP */

// int swift_getEnumCaseSinglePayload(const OpaqueValue *value, const Metadata *payload,
//                                      unsigned emptyCases)
FUNCTION(GetEnumCaseSinglePayload, NAMESPACE(swift), swift_getEnumCaseSinglePayload, RUNTIME_CC1,
         RETURNS(IntTy),
         ARGS(const OpaquePtrTy ARGNAME(value), TypeMetadataPtrTy ARGNAME(payload), UnsignedTy ARGNAME(emptyCases)),
         ARGNAMES(value, payload, emptyCases),
         ATTRS(NoUnwind))

// void swift_storeEnumTagSinglePayload(const OpaqueValue *value, const Metadata *payload,
//                                      int whichCase, unsigned emptyCases)
FUNCTION(StoreEnumTagSinglePayload, NAMESPACE(swift), swift_storeEnumTagSinglePayload, RUNTIME_CC1,
         RETURNS(VoidTy),
         ARGS(OpaquePtrTy ARGNAME(value), TypeMetadataPtrTy ARGNAME(payload), IntTy ARGNAME(whichCase), UnsignedTy ARGNAME(emptyCases)),
         ARGNAMES(value, payload, whichCase, emptyCases),
         ATTRS(NoUnwind))

// bool swift_isUniquelyReferencedOrPinned_native(const struct HeapObject *);
FUNCTION(IsUniquelyReferencedOrPinned_native, NAMESPACE(swift),
         swift_isUniquelyReferencedOrPinned_native,
         RUNTIME_CC1,
         RETURNS(Int1Ty),
         ARGS(const RefCountedPtrTy ARGNAME(object)),
         ARGNAMES(object),
         ATTRS(NoUnwind, ZExt))

// bool swift_isUniquelyReferencedOrPinned_nonNull_native(
//   const struct HeapObject *);
FUNCTION(IsUniquelyReferencedOrPinned_nonNull_native, NAMESPACE(swift),
         swift_isUniquelyReferencedOrPinned_nonNull_native,
         RUNTIME_CC1,
         RETURNS(Int1Ty),
         ARGS(const RefCountedPtrTy ARGNAME(object)),
         ARGNAMES(object),
         ATTRS(NoUnwind, ZExt))


// bool swift_isUniquelyReferenced_nonNull_native(const struct HeapObject *);
FUNCTION(IsUniquelyReferenced_nonNull_native, NAMESPACE(swift),
         swift_isUniquelyReferenced_nonNull_native,
         RUNTIME_CC1,
         RETURNS(Int1Ty),
         ARGS(const RefCountedPtrTy ARGNAME(object)),
         ARGNAMES(object),
         ATTRS(NoUnwind, ZExt))

#undef RETURNS
#undef ARGS
#undef ARGNAME
#undef ARGNAMES
#undef ATTRS
#undef NAMESPACE
#undef NO_ARGS
#undef NO_ATTRS
#undef FUNCTION
#undef FUNCTION_WITH_IMPL
#undef FUNCTION_NAME
